name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run backend tests
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        CORS_ORIGINS: http://localhost:3000,http://localhost:3001
        SECRET_KEY: test-secret-key-for-ci
        JWT_SECRET_KEY: test-jwt-secret-key-for-ci
      run: |
        cd packages/backend/src
        python -m pytest ../../../tests/unit/ -v --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./packages/backend/src/coverage.xml
        flags: backend

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run frontend tests
      run: npm test -- --coverage --watchAll=false --testTimeout=10000
    
    - name: Build frontend
      run: npm run build:react
    
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ordnungshub:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker Compose
      run: |
        echo "DB_PASSWORD=test_password" > .env
        echo "SECRET_KEY=test_secret_key_32_chars_long_12345" >> .env
        echo "JWT_SECRET_KEY=test_jwt_secret_key_32_chars_long_123" >> .env
        echo "REDIS_PASSWORD=test_redis_password" >> .env
        echo "CORS_ORIGINS=http://localhost:3000,http://localhost:3001" >> .env
        
        docker-compose up -d
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Test API endpoints
        curl -f http://localhost:8000/workspaces/ || exit 1
        
        docker-compose down

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Start services
      run: |
        echo "DB_PASSWORD=test_password" > .env
        echo "SECRET_KEY=test_secret_key_32_chars_long_12345" >> .env
        echo "JWT_SECRET_KEY=test_jwt_secret_key_32_chars_long_123" >> .env
        echo "REDIS_PASSWORD=test_redis_password" >> .env
        echo "CORS_ORIGINS=http://localhost:3000,http://localhost:3001" >> .env
        
        docker-compose up -d
        sleep 30
    
    - name: Run integration tests
      run: npm run test:e2e
    
    - name: Clean up
      run: docker-compose down

  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build production artifacts
      run: |
        npm run build:react
        npm run build:electron
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          packages/*/dist/
        retention-days: 30
