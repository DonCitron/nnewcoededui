name: OrdnungsHub CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install
        cd packages/web && npm install
        
    - name: Run TypeScript checks
      run: |
        cd packages/web && npx tsc --noEmit
        
    - name: Run frontend tests
      run: npm run test:web -- --run
      
    - name: Build frontend
      run: npm run build:web

  # Backend Tests  
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Python dependencies
      run: |
        cd packages/backend
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run backend tests
      run: npm run test:backend
      
    - name: Generate coverage report
      run: |
        cd packages/backend/src
        python -m pytest --cov=. --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: packages/backend/src/coverage.xml
        flags: backend

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit (npm)
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install safety
      run: pip install safety
      
    - name: Run Python security check
      run: |
        cd packages/backend
        safety check -r requirements.txt
      continue-on-error: true

  # Build and Deploy (Production)
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [frontend-tests, backend-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Build and Deploy (Staging)
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [frontend-tests, backend-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build frontend
      run: |
        npm install
        npm run build:web
        
    - name: Create staging artifact
      uses: actions/upload-artifact@v3
      with:
        name: staging-build
        path: |
          dist/
          packages/backend/
        retention-days: 7

  # Desktop App Build
  build-desktop:
    runs-on: ${{ matrix.os }}
    name: Build Desktop App
    needs: [frontend-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm install
        cd packages/desktop && npm install
        
    - name: Build desktop app
      run: npm run build:desktop
      
    - name: Package desktop app
      run: |
        cd packages/desktop
        npm run package
        
    - name: Upload desktop artifacts
      uses: actions/upload-artifact@v3
      with:
        name: desktop-${{ matrix.os }}
        path: packages/desktop/dist/
        retention-days: 30

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: [backend-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd packages/backend
        pip install -r requirements.txt
        pip install locust
        
    - name: Start backend
      run: |
        cd packages/backend/src
        python -m uvicorn main_simple:app --host 0.0.0.0 --port 8000 &
        sleep 10
        
    - name: Run load tests
      run: |
        # Simple load test
        curl -f http://localhost:8000/health
        echo "✅ Basic load test passed"
      continue-on-error: true

  # Notification
  notify:
    runs-on: ubuntu-latest
    name: Notify Results
    needs: [frontend-tests, backend-tests, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.frontend-tests.result == 'success' && needs.backend-tests.result == 'success' }}
      run: echo "✅ All tests passed! Ready for deployment."
      
    - name: Notify on failure
      if: ${{ needs.frontend-tests.result == 'failure' || needs.backend-tests.result == 'failure' }}
      run: echo "❌ Tests failed! Check the logs for details."